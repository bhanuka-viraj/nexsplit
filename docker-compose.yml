# ========================================
# DOCKER COMPOSE - DEVELOPMENT ENVIRONMENT
# ========================================
# This file defines the development environment with both application and database
# Use this for local development and testing

version: "3.8"

services:
  # ========================================
  # POSTGRESQL DATABASE SERVICE
  # ========================================
  # Provides the database for the application
  postgres:
    # Use official PostgreSQL image with Alpine Linux (smaller size)
    image: postgres:15-alpine
    # Container name for easy identification
    container_name: nexsplit-postgres
    # Environment variables for database configuration
    environment:
      POSTGRES_DB: nexsplit # Database name
      POSTGRES_USER: postgres # Database username
      POSTGRES_PASSWORD: ${DB_PASSWORD:-Viraj@2002} # Database password from environment variable
    # Port mapping: host_port:container_port
    ports:
      - "5432:5432" # Expose PostgreSQL port for external access
    # Volume mappings for data persistence
    volumes:
      - postgres_data:/var/lib/postgresql/data # Database data persistence
      - ./src/main/resources/db/migration:/docker-entrypoint-initdb.d # Auto-run migrations
    # Network configuration
    networks:
      - nexsplit-network # Custom network for service communication
    # Health check to ensure database is ready
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d nexsplit"] # PostgreSQL health check command
      interval: 10s # Check every 10 seconds
      timeout: 5s # Wait 5 seconds for response
      retries: 5 # Mark unhealthy after 5 failed attempts

  # ========================================
  # NEXSPLIT APPLICATION SERVICE
  # ========================================
  # The main Spring Boot application
  nexsplit-app:
    # Build configuration - build from local Dockerfile
    build:
      context: . # Build context (current directory)
      dockerfile: Dockerfile # Use our custom Dockerfile
    # Container name for easy identification
    container_name: nexsplit-app
    # Environment variables for the application
    environment:
      # Database connection - use service name 'postgres' as hostname
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/nexsplit
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-Viraj@2002} # Use environment variable
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-dev-jwt-secret-key-for-local-development-only}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-60}
      # OAuth2 Configuration
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-google-client-id}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-google-client-secret}
      # Use Docker profile for configuration
      SPRING_PROFILES_ACTIVE: docker
    # Port mapping: host_port:container_port
    ports:
      - "8080:8080" # Expose application port
    # Dependencies - wait for database to be healthy
    depends_on:
      postgres:
        condition: service_healthy # Wait until health check passes
    # Network configuration
    networks:
      - nexsplit-network # Same network as database
    # Volume mappings
    volumes:
      - ./logs:/app/logs # Map local logs directory to container logs
    # Restart policy
    restart: unless-stopped # Restart unless manually stopped

# ========================================
# VOLUMES
# ========================================
# Named volumes for data persistence
volumes:
  postgres_data: # PostgreSQL data volume

# ========================================
# NETWORKS
# ========================================
# Custom network for service communication
networks:
  nexsplit-network:
    driver: bridge # Default bridge network driver
